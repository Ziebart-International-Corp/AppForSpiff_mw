@page "/chemicals"
@using AppForSpiff.Data
@using AppForSpiff.Components.Services
@using CsvHelper
@using CsvHelper.Configuration
@using System.Globalization
@using System.Text
@using System.IO
@inject Services.EmpServices empServices
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<h3>CallSP</h3>
<br />
<br />
<br />
<div class="d-flex align-items-center gap-2">
    <div class="d-flex flex-column">
        <label for="startDate" class="small">Start Date:</label>
        <InputDate @bind-Value="StartDate" id="startDate" class="form-control form-control-sm" style="width: 150px;" />
    </div>

    <div class="d-flex flex-column">
        <label for="endDate" class="small">End Date:</label>
        <InputDate @bind-Value="EndDate" id="endDate" class="form-control form-control-sm" style="width: 150px;" />
    </div>

    <div>
        <button class="btn btn-primary btn-sm mt-2" @onclick="() => GetEmpDetailsAsync()">Run Query</button>
    </div>
</div>


<br />
<br />

<button type="button" class="btn btn-sm btn-primary" @onclick="DownloadFile">
    <i class="bi bi-download me-1"></i> Download CSV
</button>

<br />
<br />

<style>
    table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px 0;
        font-size: 1em;
        font-family: Arial, sans-serif;
        text-align: left;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    thead {
        background-color: #f4f4f4;
    }

    th, td {
        padding: 12px 15px;
        border: 1px solid #ddd;
    }

    th {
        font-weight: bold;
        text-transform: uppercase;
    }

    tbody tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    tbody tr:hover {
        background-color: #f1f1f1;
    }

    tbody td[colspan="7"] {
        text-align: center;
        font-style: italic;
        color: #666;
    }
</style>

<table>
    <thead>
        <tr>
            <th>Dealer</th>
            <th>Channel</th>
            <th>Invoice Date</th>
            <th>Invoice Number</th>
            <th>Service Code</th>
            <th>Service Name</th>
            <th>Line Item Amount</th>
        </tr>
    </thead>
    <tbody>
        @if (IsLoading)
        {
            <tr>
                <td colspan="7">Loading...</td>
            </tr>
        }
        else if (empdetails == null || !empdetails.Any())
        {
            <tr>
                <td colspan="7">No data available. Please select a date range and click "Run Query".</td>
            </tr>
        }
        else
        {
            @foreach (var item in empdetails)
            {
                <tr>
                    <td>@item.DealerCode</td>
                    <td>@item.Channel_Number</td>
                    <td>@item.InvoiceDate.ToString("MM/dd/yyyy")</td>
                    <td>@item.InvoiceNumber</td>
                    <td>@item.ServiceCode</td>
                    <td>@item.ServiceName</td>
                    <td>@item.Line_Item_Amount.ToString("C")</td>
                </tr>
            }
        }
    </tbody>
</table>

<br />
<br />

@code {
    private DateTime StartDate { get; set; } = DateTime.Today.AddDays(-7); // Default to last 7 days
    private DateTime EndDate { get; set; } = DateTime.Today; // Default to today

    private Data.ChemicalsData[]? empdetails;
    private bool IsLoading { get; set; }

    private async Task GetEmpDetailsAsync()
    {
        if (StartDate > EndDate)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Start date must be earlier than or equal to the end date.");
            return;
        }

        IsLoading = true;

        try
        {
            Console.WriteLine($"Fetching data from {StartDate} to {EndDate}");
            empdetails = await empServices.GetEmpDetailsAsync(StartDate, EndDate);

            Console.WriteLine($"Records retrieved: {empdetails?.Length ?? 0}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching data: {ex.Message}");
            empdetails = Array.Empty<ChemicalsData>();
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while fetching data. Please try again.");
        }
        finally
        {
            IsLoading = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetEmpDetailsAsync(); // Initial load
    }



    private async Task DownloadFile()
    {
        if (empdetails == null || !empdetails.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "No data available to download.");
            return;
        }

        var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                HasHeaderRecord = true
            };

        using (var memoryStream = new MemoryStream())
        using (var streamWriter = new StreamWriter(memoryStream, Encoding.UTF8))
        using (var csvWriter = new CsvWriter(streamWriter, config))
        {
            await csvWriter.WriteRecordsAsync(empdetails);
            streamWriter.Flush();
            memoryStream.Seek(0, SeekOrigin.Begin);
            var streamReference = new DotNetStreamReference(stream: memoryStream);
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "employee_details.csv", streamReference);
        }
    }
}
