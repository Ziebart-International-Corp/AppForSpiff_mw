@page "/maindatadealers/delete"
@using Microsoft.EntityFrameworkCore
@using AppForSpiff.Models
@inject IDbContextFactory<AppForSpiff.Data.AppForSpiffContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>MainDataDealer</h2>
    <hr />
    @if (maindatadealer is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">DealerCode</dt>
            <dd class="col-sm-10">@maindatadealer.DealerCode</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StoreHold_Chemical</dt>
            <dd class="col-sm-10">@maindatadealer.StoreHold_Chemical</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StoreHold_Accessories</dt>
            <dd class="col-sm-10">@maindatadealer.StoreHold_Accessories</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Store_Chemical_Percent</dt>
            <dd class="col-sm-10">@maindatadealer.Store_Chemical_Percent</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Store_Accessories_Percent</dt>
            <dd class="col-sm-10">@maindatadealer.Store_Accessories_Percent</dd>
        </dl>
        <EditForm method="post" Model="maindatadealer" OnValidSubmit="DeleteMainDataDealer" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(maindatadealer is null)">Delete</button> |
            <a href="/maindatadealers">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private MainDataDealer? maindatadealer;

    [SupplyParameterFromQuery]
    private long Dealer_ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        maindatadealer = await context.MainDataDealer.FirstOrDefaultAsync(m => m.Dealer_ID == Dealer_ID);

        if (maindatadealer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteMainDataDealer()
    {
        using var context = DbFactory.CreateDbContext();
        context.MainDataDealer.Remove(maindatadealer!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/maindatadealers");
    }
}
