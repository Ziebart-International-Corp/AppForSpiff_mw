@page "/maindata"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using AppForSpiff.Models
@using AppForSpiff.Data
@implements IAsyncDisposable
@inject IDbContextFactory<AppForSpiff.Data.AppForSpiffContext> DbFactory
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="maindata/create">Create New</a>
</p>

<div>
    <label>Start Date:</label>
    <InputDate @bind-Value="StartDate" />

    <label>End Date:</label>
    <InputDate @bind-Value="EndDate" />

    <button @onclick="ApplyDateFilter">Apply Filter</button>
</div>

<QuickGrid Class="table" Items="filteredMainData" TGridItem="MainData">
    <PropertyColumn Property="maindata => maindata.Inv_InvoiceHeader_ID" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.DealerCode" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.SalesmanEmployee_ID" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.Channel_Number" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.InvoiceDate" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.InvoiceNumber" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.InvoiceTotal" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.FirstName" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.LastName" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.PackageItem_ID" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.Svs_Service_ID" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.UnitPrice" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.Quantity" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.TotalInvoiceDiscountApplied_Stage04" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.ServiceCode" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.ServiceName" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.Description" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.Make" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.Model" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.VehicleTypeName" Sortable="true" />

    <TemplateColumn Context="maindata">
        <a href="@($"maindata/edit?invoiceheader_service_id={maindata.InvoiceHeader_Service_ID}")">Edit</a> |
        <a href="@($"maindata/details?invoiceheader_service_id={maindata.InvoiceHeader_Service_ID}")">Details</a> |
        <a href="@($"maindata/delete?invoiceheader_service_id={maindata.InvoiceHeader_Service_ID}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
<button @onclick="PreviousPage" disabled="@(CurrentPage == 0)">Previous</button>
<button @onclick="NextPage">Next</button>

@code {
    private AppForSpiffContext context = default!;
    private IQueryable<MainData> filteredMainData = default!;
    private DateOnly? StartDate { get; set; }
    private DateOnly? EndDate { get; set; }
    private int PageSize { get; set; } = 50; // Number of items per page
    private int CurrentPage { get; set; } = 0;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        LoadMainData();
    }

    private void LoadMainData()
    {
        // Initial data load with pagination and optional date filtering
        filteredMainData = GetPagedData();
    }

    private IQueryable<MainData> GetPagedData()
    {
        // Filter by date if StartDate or EndDate is set, then apply pagination
        var query = context.MainData.AsQueryable();

        if (StartDate.HasValue)
        {
            query = query.Where(maindata => maindata.InvoiceDate >= StartDate);
        }
        if (EndDate.HasValue)
        {
            query = query.Where(maindata => maindata.InvoiceDate <= EndDate);
        }

        return query
            .OrderBy(maindata => maindata.InvoiceDate) // Adjust as needed
            .Skip(CurrentPage * PageSize)
            .Take(PageSize);
    }

    private void ApplyDateFilter()
    {
        // Re-apply the filter and reset to the first page
        CurrentPage = 0;
        filteredMainData = GetPagedData();
    }

    private void NextPage()
    {
        // Go to the next page and reload data
        CurrentPage++;
        filteredMainData = GetPagedData();
    }

    private void PreviousPage()
    {
        // Go to the previous page (if not already at the first) and reload data
        if (CurrentPage > 0)
        {
            CurrentPage--;
            filteredMainData = GetPagedData();
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}


