@page "/maindata"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using AppForSpiff.Models
@using AppForSpiff.Data
@implements IAsyncDisposable
@inject IDbContextFactory<AppForSpiffContext> DbFactory
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Index</PageTitle>

<h1>Index</h1>
<!-- Search Section -->
<div class="mb-3">
    <div class="form-group mb-3">
        <input type="text" class="form-control" style="max-width: 300px;" placeholder="Search..." @bind="searchTerm" @bind:event="oninput" />
        <button class="btn btn-primary mt-2" @onclick="ApplySearchFilter">Search</button>
    </div>

    <!-- Date Filter Section -->
    <div class="form-group d-flex align-items-center mb-3">
        <label class="me-2">Start Date:</label>
        <InputDate @bind-Value="startDate" class="form-control me-3" style="max-width: 200px;" />

        <label class="me-2">End Date:</label>
        <InputDate @bind-Value="endDate" class="form-control" style="max-width: 200px;" />
        <button class="btn btn-secondary ms-3" @onclick="ApplyDateFilter">Apply Date Filter</button>
    </div>
</div>


<p>
    <a href="maindata/create">Create New</a>
</p>

<QuickGrid Class="table" Items="filteredData" TGridItem="MainData">
    <PropertyColumn Property="maindata => maindata.Inv_InvoiceHeader_ID" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.DealerCode" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.SalesmanEmployee_ID" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.Channel_Number" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.InvoiceDate" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.InvoiceNumber" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.InvoiceTotal" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.FirstName" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.LastName" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.PackageItem_ID" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.Svs_Service_ID" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.UnitPrice" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.Quantity" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.TotalInvoiceDiscountApplied_Stage04" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.ServiceCode" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.ServiceName" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.Description" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.Make" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.Model" Sortable="true" />
    <PropertyColumn Property="maindata => maindata.VehicleTypeName" Sortable="true" />

    <TemplateColumn Context="maindata">
        <a href="@($"maindata/edit?invoiceheader_service_id={maindata.InvoiceHeader_Service_ID}")">Edit</a> |
        <a href="@($"maindata/details?invoiceheader_service_id={maindata.InvoiceHeader_Service_ID}")">Details</a> |
        <a href="@($"maindata/delete?invoiceheader_service_id={maindata.InvoiceHeader_Service_ID}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

<button @onclick="PreviousPage" disabled="@(CurrentPage == 0)">Previous</button>
<button @onclick="NextPage">Next</button>

@code {
    private AppForSpiffContext context = default!;
    private IQueryable<MainData> originalData = Enumerable.Empty<MainData>().AsQueryable();
    private IQueryable<MainData> filteredData = Enumerable.Empty<MainData>().AsQueryable();

    private string searchTerm = string.Empty;
    private DateOnly? startDate;
    private DateOnly? endDate;
    private int PageSize { get; set; } = 50;
    private int CurrentPage { get; set; } = 0;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        originalData = context.MainData.AsQueryable();
        ApplyFilter(); // Initial load
    }

    private void ApplyFilter()
    {
        var query = originalData;

        // Apply search term filter if set
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            query = query.Where(maindata =>
                maindata.Inv_InvoiceHeader_ID.ToString().Contains(searchTerm) ||
                maindata.DealerCode.Contains(searchTerm) ||
                maindata.FirstName.Contains(searchTerm) ||
                maindata.LastName.Contains(searchTerm) ||
                maindata.InvoiceTotal.ToString().Contains(searchTerm)
            );
        }

        // Apply date range filter if set
        if (startDate.HasValue)
        {
            query = query.Where(maindata => maindata.InvoiceDate >= startDate.Value);
        }

        if (endDate.HasValue)
        {
            query = query.Where(maindata => maindata.InvoiceDate <= endDate.Value);
        }

        // Reset pagination after filter
        CurrentPage = 0;

        UpdatePaginatedData(query);
    }

    private void ApplySearchFilter()
    {
        // Only apply search term filtering
        var query = originalData;

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            query = query.Where(maindata =>
                maindata.Inv_InvoiceHeader_ID.ToString().Contains(searchTerm) ||
                maindata.DealerCode.Contains(searchTerm) ||
                maindata.FirstName.Contains(searchTerm) ||
                maindata.LastName.Contains(searchTerm) ||
                maindata.InvoiceTotal.ToString().Contains(searchTerm)
            );
        }

        CurrentPage = 0;
        UpdatePaginatedData(query);
    }

    private void ApplyDateFilter()
    {
        // Only apply date range filtering
        var query = originalData;

        if (startDate.HasValue)
        {
            query = query.Where(maindata => maindata.InvoiceDate >= startDate.Value);
        }

        if (endDate.HasValue)
        {
            query = query.Where(maindata => maindata.InvoiceDate <= endDate.Value);
        }

        CurrentPage = 0;
        UpdatePaginatedData(query);
    }

    private void UpdatePaginatedData(IQueryable<MainData> query)
    {
        filteredData = query
            .OrderBy(maindata => maindata.InvoiceDate)
            .Skip(CurrentPage * PageSize)
            .Take(PageSize);

        StateHasChanged();
    }

    private void NextPage()
    {
        CurrentPage++;
        UpdatePaginatedData(filteredData);
    }

    private void PreviousPage()
    {
        if (CurrentPage > 0)
        {
            CurrentPage--;
            UpdatePaginatedData(filteredData);
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}