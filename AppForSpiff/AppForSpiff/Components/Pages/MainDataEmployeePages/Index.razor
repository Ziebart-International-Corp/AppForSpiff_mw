@page "/maindataemployees"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using AppForSpiff.Models
@using AppForSpiff.Data
@implements IAsyncDisposable
@inject IDbContextFactory<AppForSpiff.Data.AppForSpiffContext> DbFactory
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Index</PageTitle>

<h1>Index</h1>
<!-- Search Section -->
<div class="mb-3">
    <div class="form-group mb-3">
        <input type="text" class="form-control" style="max-width: 300px;" placeholder="Search..." @bind="searchTerm" @bind:event="oninput" />
        <button class="btn btn-primary mt-2" @onclick="ApplySearchFilter">Search</button>
    </div>
</div>

<p>
    <a href="maindataemployees/create">Create New</a>
</p>

<QuickGrid Class="table" Items="filteredData">
    <PropertyColumn Property="maindataemployee => maindataemployee.DealerCode" Sortable="true" Title="Dealer"/>
    <PropertyColumn Property="maindataemployee => maindataemployee.FirstName" Sortable="true" Title="First Name"/>
    <PropertyColumn Property="maindataemployee => maindataemployee.LastName" Sortable="true" Title="Last Name"/>
    <PropertyColumn Property="maindataemployee => maindataemployee.Spiff_Percent" Sortable="true" Title="Spiff Percent"/>
    <PropertyColumn Property="maindataemployee => maindataemployee.Active" Sortable="true" Title="Status"/>

    <TemplateColumn Context="maindataemployee">
        <a href="@($"maindataemployees/edit?edl_employee_id={maindataemployee.Edl_Employee_ID}")">Edit</a> |
        <a href="@($"maindataemployees/details?edl_employee_id={maindataemployee.Edl_Employee_ID}")">Details</a> |
        <a href="@($"maindataemployees/delete?edl_employee_id={maindataemployee.Edl_Employee_ID}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private AppForSpiffContext context = default!;
    private IQueryable<MainDataEmployee> originalData = default!;
    private IQueryable<MainDataEmployee> filteredData = default!;
    private string searchTerm = string.Empty;
    private int CurrentPage = 0;
    private const int PageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        context = await DbFactory.CreateDbContextAsync();
        originalData = context.MainDataEmployee;
        filteredData = originalData;
    }

    private void ApplySearchFilter()
    {
        var query = originalData;

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            query = originalData.Where(maindataemployee =>
            (maindataemployee.DealerCode != null && maindataemployee.DealerCode.Contains(searchTerm)) ||
            (maindataemployee.FirstName != null && maindataemployee.FirstName.Contains(searchTerm)) ||
            (maindataemployee.LastName != null && maindataemployee.LastName.Contains(searchTerm)) ||
            (maindataemployee.Spiff_Percent.HasValue && maindataemployee.Spiff_Percent.Value.ToString().Contains(searchTerm)) ||
            (maindataemployee.Active != null && maindataemployee.Active.Contains(searchTerm))
            );
    }

        CurrentPage = 0;
        filteredData = query;
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
